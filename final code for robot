#include <SoftwareSerial.h> //Software Serial Port
#define RxD 7
#define TxD 6
#define ConnStatus A1
#define DEBUG_ENABLED 1
##################################################################################

#include <Servo.h>
Servo servoLeft;

Servo servoRight;

int shieldPairNumber = 2;

// CAUTION: If ConnStatusSupported = true you MUST NOT use pin A1 otherwise "random" reboots will occur
// CAUTION: If ConnStatusSupported = true you MUST set the PIO[1] switch to A1 (not NC)

boolean ConnStatusSupported = true; // Set to "true" when digital connection status is available on Arduino pin

// #######################################################

// The following two string variable are used to simplify adaptation of code to different shield pairs

String slaveNameCmd = "\r\n+STNA=Slave"; // This is concatenated with shieldPairNumber later

SoftwareSerial blueToothSerial(RxD, TxD);

void setup()
{
  Serial.begin(9600);
  blueToothSerial.begin(38400); // Set Bluetooth module to default baud rate 38400

  servoLeft.attach(13); //
  servoRight.attach(12); //
  servoLeft.writeMicroseconds(1520);//set value to stop
  servoRight.writeMicroseconds(1500);//set value to stop

  pinMode(RxD, INPUT);
  pinMode(TxD, OUTPUT);
  pinMode(ConnStatus, INPUT);

  // Check whether Master and Slave are already connected by polling the ConnStatus pin (A1 on SeeedStudio v1 shield)
  // This prevents running the full connection setup routine if not necessary.

  if (ConnStatusSupported) Serial.println("Checking Slave-Master connection status.");

  if (ConnStatusSupported && digitalRead(ConnStatus) == 1)
  {
    Serial.println("Already connected to Master - remove USB cable if reboot of Master Bluetooth required.");
  }
  else
  {
    Serial.println("Not connected to Master.");

    setupBlueToothConnection();   // Set up the local (slave) Bluetooth module

    delay(1000);                  // Wait one second and flush the serial buffers
    Serial.flush();
    blueToothSerial.flush();
  }
}

void loop()
{
  char recvChar;

  while (1)
  {
    if (blueToothSerial.available()) // Check if there's any data sent from the remote Bluetooth shield
    {
      recvChar = blueToothSerial.read(); //read the value
      //make decision
      obstaclenavigationrobot(recvChar);
      trackfollowing(recvChar);
      Serial.print(recvChar);
    }

    if (Serial.available())           // Check if there's any data sent from the local serial terminal. You can add the other applications here.
    {
      recvChar = Serial.read();
      Serial.print(recvChar);
      blueToothSerial.print(recvChar);
    }
  }
}

void obstaclenavigationrobot(char recvChar) // task 1
{
  if (recvChar == 'w')
  {
    servoLeft.writeMicroseconds(1700);//set value to go forward
    servoRight.writeMicroseconds(1300);//set value to go forward
    delay(1000);
    servoLeft.writeMicroseconds(1520);//set value to stop
    servoRight.writeMicroseconds(1500);//set value to stop

  }
  if (recvChar == 'a')
  {
    servoLeft.writeMicroseconds(1470); //set value to turn left
    servoRight.writeMicroseconds(1470);
    delay(500);
    servoLeft.writeMicroseconds(1520);//set value to stop
    servoRight.writeMicroseconds(1500);//set value to stop
  }
  if (recvChar == 's')
  {
    servoLeft.writeMicroseconds(1300);//set value to go backward
    servoRight.writeMicroseconds(1700);
    delay(500);
    servoLeft.writeMicroseconds(1520);//set value to stop
    servoRight.writeMicroseconds(1500);//set value to stop
  }
  if (recvChar == 'd')
  {
    servoLeft.writeMicroseconds(1530);//set value to turn right
    servoRight.writeMicroseconds(1530);
    delay(1000);
    servoLeft.writeMicroseconds(1520);//set value to stop
    servoRight.writeMicroseconds(1500);
  }
}

void trackfollowing(char recvChar) // task 2
{
  int irleft = irDetect(9, 10, 38000);
  int irright = irDetect(2, 3, 38000);
  while (recvChar == 't')
  {
    if ( irleft == 1 && irright == 0) //the robot lean to the right
    {
      servoLeft.writeMicroseconds(1530);//set value to rotate slower
      servoRight.writeMicroseconds(1530);//set value to rotate faster
    }
    if ( irleft == 0 && irright == 1) //the robot lean to the left
    {
      servoLeft.writeMicroseconds(1470);//set value to rotate faster
      servoRight.writeMicroseconds(1470);//set value to rotate slower
    }
    if ( irleft == 0 && irright == 0) //the robot is right on the track
    {
      servoLeft.writeMicroseconds(1700);//set value to go forward
      servoRight.writeMicroseconds(1300);//set value to go forward
    }
    if ( irleft == 1 && irright == 1) //the robot 
    {
      servoLeft.writeMicroseconds(1700);
      servoRight.writeMicroseconds(1300);
      delay(1000);
      servoLeft.writeMicroseconds(1520);//set value to stop
      servoRight.writeMicroseconds(1500);
      servoLeft.detach();                 // Stop sending servo signals
      servoRight.detach();
      blueToothSerial.print("Find the table-tennis ball");
    }
  }
}




int irDetect(int irLedPin, int irReceiverPin, long frequency) // irdetect
{
  tone(irLedPin, frequency, 8);
  delay(1);
  int ir = digitalRead(irReceiverPin);
  delay(1);
  return ir;
}







void setupBlueToothConnection()//    bluetooth
{
  Serial.println("Setting up the local (slave) Bluetooth module.");

  slaveNameCmd += shieldPairNumber;
  slaveNameCmd += "\r\n";

  blueToothSerial.print("\r\n+STWMOD=0\r\n"); // Set the Bluetooth to work in slave mode
  blueToothSerial.print(slaveNameCmd); // Set the Bluetooth name using slaveNameCmd
  blueToothSerial.print("\r\n+STAUTO=0\r\n"); // Auto-connection should be forbidden here
  blueToothSerial.print("\r\n+STOAUT=1\r\n"); // Permit paired device to connect me

  // print() sets up a transmit/outgoing buffer for the string which is then transmitted via interrupts one character at a time.
  // This allows the program to keep running, with the transmitting happening in the background.
  // Serial.flush() does not empty this buffer, instead it pauses the program until all Serial.print()ing is done.
  // This is useful if there is critical timing mixed in with Serial.print()s.
  // To clear an "incoming" serial buffer, use while(Serial.available()){Serial.read();}

  blueToothSerial.flush();
  delay(2000); // This delay is required

  blueToothSerial.print("\r\n+INQ=1\r\n"); // Make the slave Bluetooth inquirable

  blueToothSerial.flush();
  delay(2000); // This delay is required

  Serial.println("The slave bluetooth is inquirable!");
}

